// TG-Script 扩展数值类型全面测试

// ============================================================================
// 扩展整数类型测试
// ============================================================================

// 8位有符号整数 (-128 到 127)
let int8Min: int8 = -128;
let int8Max: int8 = 127;
let int8Zero: int8 = 0;

// 16位有符号整数 (-32768 到 32767)
let int16Min: int16 = -32768;
let int16Max: int16 = 32767;
let int16Zero: int16 = 0;

// 32位有符号整数 (-2147483648 到 2147483647)
let int32Min: int32 = -2147483648;
let int32Max: int32 = 2147483647;
let int32Zero: int32 = 0;

// 64位有符号整数
let int64Min: int64 = -9223372036854775807;
let int64Max: int64 = 9223372036854775807;
let int64Zero: int64 = 0;

// ============================================================================
// 扩展浮点类型测试
// ============================================================================

// 32位浮点数
let float32Pi: float32 = 3.14159;
let float32E: float32 = 2.71828;
let float32Zero: float32 = 0.0;
let float32Negative: float32 = -1.5;

// 64位浮点数
let float64Pi: float64 = 3.141592653589793;
let float64E: float64 = 2.718281828459045;
let float64Zero: float64 = 0.0;
let float64Negative: float64 = -1.5;

// ============================================================================
// 类型推断测试
// ============================================================================

// 从字面量推断扩展类型
let inferredInt8 = 100;  // 应该推断为 int
let inferredFloat32 = 3.14;  // 应该推断为 float

// ============================================================================
// 算术运算测试
// ============================================================================

// 同类型运算
let int8Sum = int8Max + int8Min;
let int16Product = int16Max * int16Zero;
let int32Difference = int32Max - int32Min;
let int64Division = int64Max / int64Max;

let float32Sum = float32Pi + float32E;
let float32Product = float32Pi * float32E;
let float64Sum = float64Pi + float64E;
let float64Product = float64Pi * float64E;

// ============================================================================
// 函数参数和返回值测试
// ============================================================================

// 使用扩展类型作为函数参数
function addInt8(a: int8, b: int8): int8 {
    return a + b;
}

function multiplyInt16(x: int16, y: int16): int16 {
    return x * y;
}

function divideFloat32(a: float32, b: float32): float32 {
    return a / b;
}

function processInt64(value: int64): int64 {
    return value * 2;
}

// ============================================================================
// 变量赋值和重新赋值测试
// ============================================================================

let mutableInt8: int8 = 50;
let mutableInt8 = 75;

let mutableFloat32: float32 = 1.0;
let mutableFloat32 = 2.5;

// ============================================================================
// 比较运算测试
// ============================================================================

let int8Comparison = int8Max > int8Min;
let int16Equality = int16Zero == 0;
let float32Greater = float32Pi > float32E;
let float64Less = float64Zero < float64Pi;

// ============================================================================
// 函数调用测试
// ============================================================================

let int8Result = addInt8(10, 20);
let int16Result = multiplyInt16(100, 200);
let float32Result = divideFloat32(10.0, 3.0);
let int64Result = processInt64(1000000);