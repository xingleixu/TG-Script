// 扩展数值类型最终验证测试
// 测试所有新增的扩展数值类型：int8, int16, int32, int64, float32, float64

// ============================================================================
// 1. 基本类型声明和赋值
// ============================================================================

// 整数类型
let int8Val: int8 = 127;
let int16Val: int16 = 32767;
let int32Val: int32 = 2147483647;
let int64Val: int64 = 9223372036854775807;

// 浮点类型
let float32Val: float32 = 3.14159;
let float64Val: float64 = 2.718281828459045;

// 负数测试
let negInt8: int8 = -128;
let negInt16: int16 = -32768;
let negInt32: int32 = -2147483648;
let negInt64: int64 = -9223372036854775807;
let negFloat32: float32 = -3.14159;
let negFloat64: float64 = -2.718281828459045;

// ============================================================================
// 2. 算术运算
// ============================================================================

// 整数运算
let int8Sum: int8 = 10 + 20;
let int16Product: int16 = 100 * 200;
let int32Diff: int32 = 1000000 - 500000;
let int64Quotient: int64 = 1000000000 / 1000;

// 浮点运算
let float32Sum: float32 = 1.5 + 2.5;
let float64Product: float64 = 3.14159 * 2.0;

// ============================================================================
// 3. 比较运算
// ============================================================================

// 整数比较
let int8Compare: boolean = int8Val > 100;
let int16Compare: boolean = int16Val <= 32767;
let int32Compare: boolean = int32Val == 2147483647;
let int64Compare: boolean = int64Val != 0;

// 浮点比较
let float32Compare: boolean = float32Val >= 3.0;
let float64Compare: boolean = float64Val < 3.0;

// ============================================================================
// 4. 函数声明和返回值
// ============================================================================

// 整数函数
function addInt8(a: int8, b: int8): int8 {
    return a + b;
}

function multiplyInt16(a: int16, b: int16): int16 {
    return a * b;
}

function processInt32(value: int32): int32 {
    return value * 2;
}

function calculateInt64(base: int64): int64 {
    return base + 1000;
}

// 浮点函数
function addFloat32(a: float32, b: float32): float32 {
    return a + b;
}

function processFloat64(value: float64): float64 {
    return value * 1.5;
}

// ============================================================================
// 5. 混合类型运算（在同一数值类别内）
// ============================================================================

// 整数类型之间的运算
let mixedIntResult1: int32 = 100 + 200;
let mixedIntResult2: int64 = 1000000 * 2;

// 浮点类型之间的运算
let mixedFloatResult1: float32 = 1.5 + 2.5;
let mixedFloatResult2: float64 = 3.14159 * 2.0;

// ============================================================================
// 6. 条件语句中的类型使用
// ============================================================================

if (int8Val > 0) {
    let positiveInt8: int8 = int8Val;
}

if (float32Val > 0.0) {
    let positiveFloat32: float32 = float32Val;
}

// ============================================================================
// 7. 数组和集合（如果支持）
// ============================================================================

// 注意：这部分可能需要根据TG-Script的数组支持情况调整
// let int8Array: int8[] = [1, 2, 3, 4, 5];
// let float32Array: float32[] = [1.1, 2.2, 3.3];

// ============================================================================
// 8. 边界值测试
// ============================================================================

// 最大值
let maxInt8: int8 = 127;
let maxInt16: int16 = 32767;
let maxInt32: int32 = 2147483647;
let maxInt64: int64 = 9223372036854775807;

// 最小值
let minInt8: int8 = -128;
let minInt16: int16 = -32768;
let minInt32: int32 = -2147483648;
let minInt64: int64 = -9223372036854775807;

// 零值
let zeroInt8: int8 = 0;
let zeroInt16: int16 = 0;
let zeroInt32: int32 = 0;
let zeroInt64: int64 = 0;
let zeroFloat32: float32 = 0.0;
let zeroFloat64: float64 = 0.0;

// ============================================================================
// 9. 复杂表达式
// ============================================================================

let complexInt: int32 = (100 + 200) * 3 - 50;
let complexFloat: float64 = (3.14159 + 2.71828) * 2.0 / 3.0;

// ============================================================================
// 测试完成标记
// ============================================================================

let testComplete: boolean = true;